!function(){"use strict";function o(o,e){o.otherwise("/")}function e(o,e,t){console.log("app module started!")}angular.module("myApp",["ui.router","ngMaterial","ngFileUpload"]).config(o).run(e),o.$inject=["$urlRouterProvider","$locationProvider"],e.$inject=["$http","$rootScope","$window"]}(),function(){"use strict";function o(o){console.log("pdfOcr component on!")}angular.module("myApp").component("pdfOcr",{templateUrl:"/src/app/pdfOcrComponent/pdfOcr.tmpl.html",controller:o}),o.$inject=["$scope"]}(),function(){"use strict";function o(o){console.log("In routes config"),o.state("app",{abstract:!0,templateUrl:"front-end.html"}).state("topPage",{url:"/",templateUrl:"route/homepage.html",controller:"homepageCtrl",controllerAs:"$ctrl"})}angular.module("myApp").config(o),o.$inject=["$stateProvider"]}(),function(){"use strict";function o(o){console.log("homepageCtrl ok")}angular.module("myApp").controller("homepageCtrl",o),o.$inject=["$scope"]}(),function(){"use strict";function o(o,e){var t=this;console.log("uploadFile component on!"),t.$onInit=function(){t.files=[]},t.submit=function(){o.form.file.$valid&&o.file&&o.upload(o.file)},document.querySelector("input").addEventListener("change",t.files),t.upload=function(o){Upload.upload({url:"upload/url",data:{file:o}}).then(function(o){console.log("Success "+o.config.data.file.name+"uploaded. Response: "+o.data)},function(o){console.log("Error status: "+o.status)},function(o){var e=parseInt(100*o.loaded/o.total);console.log("progress: "+e+"% "+o.config.data.file.name)})}}angular.module("myApp").component("uploadFile",{templateUrl:"/src/app/uploadFileComponent/uploadFile.tmpl.html",controller:o,binding:{uploadedFileSrc:"@"}}),o.$inject=["$scope",fileUpload]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm15QXBwLm1vZHVsZS5qcyIsInBkZk9jckNvbXBvbmVudC9wZGZPY3IuY29tcG9uZW50LmpzIiwicm91dGUvYXBwLnJvdXRlcy5qcyIsInJvdXRlL2hvbWVwYWdlLmNvbnRyb2xsZXIuanMiLCJ1cGxvYWRGaWxlQ29tcG9uZW50L3VwbG9hZEZpbGUuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwib3RoZXJ3aXNlIiwicnVuIiwiJGh0dHAiLCIkcm9vdFNjb3BlIiwiJHdpbmRvdyIsImNvbnNvbGUiLCJsb2ciLCJhbmd1bGFyIiwibW9kdWxlIiwiJGluamVjdCIsInBkZk9jckN0cmwiLCIkc2NvcGUiLCJjb21wb25lbnQiLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJyb3V0ZUNvbmZpZyIsIiRzdGF0ZVByb3ZpZGVyIiwic3RhdGUiLCJhYnN0cmFjdCIsInVybCIsImNvbnRyb2xsZXJBcyIsImhvbWVwYWdlQ3RybCIsInVwbG9hZEZpbGVDdHJsIiwidXBsb2FkRmlsZSIsIiRjdHJsIiwidGhpcyIsIiRvbkluaXQiLCJmaWxlcyIsInN1Ym1pdCIsImZvcm0iLCJmaWxlIiwiJHZhbGlkIiwidXBsb2FkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYWRkRXZlbnRMaXN0ZW5lciIsIlVwbG9hZCIsImRhdGEiLCJ0aGVuIiwicmVzcCIsIm5hbWUiLCJzdGF0dXMiLCJldnQiLCJwcm9ncmVzc1BlcmNlbnRhZ2UiLCJwYXJzZUludCIsImxvYWRlZCIsInRvdGFsIiwiYmluZGluZyIsInVwbG9hZGVkRmlsZVNyYyIsImZpbGVVcGxvYWQiXSwibWFwcGluZ3MiOiJDQUFBLFdBQ0EsYUFPQSxTQUFBQSxFQUFBQyxFQUFBQyxHQUVBRCxFQUFBRSxVQUFBLEtBS0EsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUMsUUFBQUMsSUFBQSx1QkFkQUMsUUFBQUMsT0FBQSxRQUFBLENBQUEsWUFBQSxhQUFBLGlCQUNBWCxPQUFBQSxHQUNBSSxJQUFBQSxHQUVBSixFQUFBWSxRQUFBLENBQUEscUJBQUEscUJBT0FSLEVBQUFRLFFBQUEsQ0FBQSxRQUFBLGFBQUEsV0FiQSxHQ0FBLFdBQ0EsYUFVQSxTQUFBQyxFQUFBQyxHQUVBTixRQUFBQyxJQUFBLHdCQVZBQyxRQUFBQyxPQUFBLFNBQ0FJLFVBQUEsU0FBQSxDQUNBQyxZQUFBLDRDQUNBQyxXQUFBSixJQUdBQSxFQUFBRCxRQUFBLENBQUEsVUFUQSxHQ0FBLFdBQ0EsYUFTQSxTQUFBTSxFQUFBQyxHQUNBWCxRQUFBQyxJQUFBLG9CQUVBVSxFQUNBQyxNQUFBLE1BQUEsQ0FDQUMsVUFBQSxFQUNBTCxZQUFBLG1CQUVBSSxNQUFBLFVBQUEsQ0FDQUUsSUFBQSxJQUNBTixZQUFBLHNCQUNBQyxXQUFBLGVBQ0FNLGFBQUEsVUFuQkFiLFFBQUFDLE9BQUEsU0FDQVgsT0FBQWtCLEdBSUFBLEVBQUFOLFFBQUEsQ0FBQSxrQkFSQSxHQ0FBLFdBQ0EsYUFPQSxTQUFBWSxFQUFBVixHQUVBTixRQUFBQyxJQUFBLG1CQVBBQyxRQUFBQyxPQUFBLFNBQ0FNLFdBQUEsZUFBQU8sR0FFQUEsRUFBQVosUUFBQSxDQUFBLFVBTkEsR0NBQSxXQUNBLGFBYUEsU0FBQWEsRUFBQVgsRUFBQVksR0FDQSxJQUFBQyxFQUFBQyxLQUNBcEIsUUFBQUMsSUFBQSw0QkFDQWtCLEVBQUFFLFFBQUEsV0FDQUYsRUFBQUcsTUFBQSxJQUdBSCxFQUFBSSxPQUFBLFdBQ0FqQixFQUFBa0IsS0FBQUMsS0FBQUMsUUFBQXBCLEVBQUFtQixNQUNBbkIsRUFBQXFCLE9BQUFyQixFQUFBbUIsT0FJQUcsU0FBQUMsY0FBQSxTQUNBQyxpQkFBQSxTQUFBWCxFQUFBRyxPQUVBSCxFQUFBUSxPQUFBLFNBQUFGLEdBQ0FNLE9BQUFKLE9BQUEsQ0FDQWIsSUFBQSxhQUNBa0IsS0FBQSxDQUNBUCxLQUFBQSxLQUVBUSxLQUFBLFNBQUFDLEdBQ0FsQyxRQUFBQyxJQUFBLFdBQUFpQyxFQUFBMUMsT0FBQXdDLEtBQUFQLEtBQUFVLEtBQUEsdUJBQUFELEVBQUFGLE9BQ0EsU0FBQUUsR0FDQWxDLFFBQUFDLElBQUEsaUJBQUFpQyxFQUFBRSxTQUNBLFNBQUFDLEdBQ0EsSUFBQUMsRUFBQUMsU0FBQSxJQUFBRixFQUFBRyxPQUFBSCxFQUFBSSxPQUNBekMsUUFBQUMsSUFBQSxhQUFBcUMsRUFBQSxLQUFBRCxFQUFBN0MsT0FBQXdDLEtBQUFQLEtBQUFVLFNBdkNBakMsUUFBQUMsT0FBQSxTQUNBSSxVQUFBLGFBQUEsQ0FDQUMsWUFBQSxvREFDQUMsV0FBQVEsRUFDQXlCLFFBQUEsQ0FDQUMsZ0JBQUEsT0FJQTFCLEVBQUFiLFFBQUEsQ0FBQSxTQUFBd0MsWUFaQSIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcbiAgICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXCJ1aS5yb3V0ZXJcIiwgXCJuZ01hdGVyaWFsXCIsIFwibmdGaWxlVXBsb2FkXCJdKVxuICAgICAgICAuY29uZmlnKGNvbmZpZylcbiAgICAgICAgLnJ1bihydW4pO1xuXG4gICAgY29uZmlnLiRpbmplY3QgPSBbJyR1cmxSb3V0ZXJQcm92aWRlcicsICckbG9jYXRpb25Qcm92aWRlciddO1xuXG4gICAgZnVuY3Rpb24gY29uZmlnKCR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblxuICAgICAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvJyk7XG4gICAgfVxuXG4gICAgcnVuLiRpbmplY3QgPSBbJyRodHRwJywgJyRyb290U2NvcGUnLCAnJHdpbmRvdyddO1xuXG4gICAgZnVuY3Rpb24gcnVuKCRodHRwLCAkcm9vdFNjb3BlLCAkd2luZG93KSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYXBwIG1vZHVsZSBzdGFydGVkIVwiKTtcbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKVxuICAgICAgICAuY29tcG9uZW50KCdwZGZPY3InLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9zcmMvYXBwL3BkZk9jckNvbXBvbmVudC9wZGZPY3IudG1wbC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHBkZk9jckN0cmwsXG4gICAgICAgIH0pO1xuXG4gICAgcGRmT2NyQ3RybC4kaW5qZWN0ID0gWyckc2NvcGUnXTtcblxuICAgIGZ1bmN0aW9uIHBkZk9jckN0cmwoJHNjb3BlKSB7XG4gICAgICAgIHZhciAkY3RybCA9IHRoaXM7XG4gICAgICAgIGNvbnNvbGUubG9nKFwicGRmT2NyIGNvbXBvbmVudCBvbiFcIik7XG4gICAgfVxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcpXG4gICAgICAgIC5jb25maWcocm91dGVDb25maWcpO1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZXMgdGhlIHJvdXRlcyBhbmQgdmlld3NcbiAgICAgKi9cbiAgICByb3V0ZUNvbmZpZy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlciddO1xuXG4gICAgZnVuY3Rpb24gcm91dGVDb25maWcoJHN0YXRlUHJvdmlkZXIpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0luIHJvdXRlcyBjb25maWcnKTtcbiAgICAgICAgLy8gUm91dGVzXG4gICAgICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAgICAgICAuc3RhdGUoJ2FwcCcsIHtcbiAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Zyb250LWVuZC5odG1sJyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc3RhdGUoJ3RvcFBhZ2UnLHtcbiAgICAgICAgICAgICAgICB1cmw6Jy8nLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOidyb3V0ZS9ob21lcGFnZS5odG1sJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnaG9tZXBhZ2VDdHJsJyxcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICckY3RybCcgXG4gICAgICAgICAgICB9KVxuICAgIH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcpXG4gICAgICAgIC5jb250cm9sbGVyKCdob21lcGFnZUN0cmwnLCBob21lcGFnZUN0cmwpO1xuXG4gICAgaG9tZXBhZ2VDdHJsLiRpbmplY3QgPSBbJyRzY29wZSddO1xuXG4gICAgZnVuY3Rpb24gaG9tZXBhZ2VDdHJsKCRzY29wZSkge1xuICAgICAgICB2YXIgJGN0cmwgPSB0aGlzO1xuICAgICAgICBjb25zb2xlLmxvZyhcImhvbWVwYWdlQ3RybCBva1wiKTtcbiAgICB9XG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnKVxuICAgICAgICAuY29tcG9uZW50KCd1cGxvYWRGaWxlJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvc3JjL2FwcC91cGxvYWRGaWxlQ29tcG9uZW50L3VwbG9hZEZpbGUudG1wbC5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IHVwbG9hZEZpbGVDdHJsLFxuICAgICAgICAgICAgYmluZGluZzoge1xuICAgICAgICAgICAgICAgIHVwbG9hZGVkRmlsZVNyYzogJ0AnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgdXBsb2FkRmlsZUN0cmwuJGluamVjdCA9IFsnJHNjb3BlJywgZmlsZVVwbG9hZF07XG5cbiAgICBmdW5jdGlvbiB1cGxvYWRGaWxlQ3RybCgkc2NvcGUsIHVwbG9hZEZpbGUpIHtcbiAgICAgICAgdmFyICRjdHJsID0gdGhpcztcbiAgICAgICAgY29uc29sZS5sb2coXCJ1cGxvYWRGaWxlIGNvbXBvbmVudCBvbiFcIik7XG4gICAgICAgICRjdHJsLiRvbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkY3RybC5maWxlcyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgJGN0cmwuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCRzY29wZS5mb3JtLmZpbGUuJHZhbGlkICYmICRzY29wZS5maWxlKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZCgkc2NvcGUuZmlsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcbiAgICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgJGN0cmwuZmlsZXMpO1xuXG4gICAgICAgICRjdHJsLnVwbG9hZCA9IGZ1bmN0aW9uIChmaWxlKSB7XG4gICAgICAgICAgICBVcGxvYWQudXBsb2FkKHtcbiAgICAgICAgICAgICAgICB1cmw6ICd1cGxvYWQvdXJsJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGU6IGZpbGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3MgJyArIHJlc3AuY29uZmlnLmRhdGEuZmlsZS5uYW1lICsgJ3VwbG9hZGVkLiBSZXNwb25zZTogJyArIHJlc3AuZGF0YSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdFcnJvciBzdGF0dXM6ICcgKyByZXNwLnN0YXR1cyk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb2dyZXNzUGVyY2VudGFnZSA9IHBhcnNlSW50KDEwMC4wICogZXZ0LmxvYWRlZCAvIGV2dC50b3RhbCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3Byb2dyZXNzOiAnICsgcHJvZ3Jlc3NQZXJjZW50YWdlICsgJyUgJyArIGV2dC5jb25maWcuZGF0YS5maWxlLm5hbWUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICB9XG59KSgpOyJdfQ==
