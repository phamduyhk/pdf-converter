!function(){"use strict";function o(o,e){o.otherwise("/")}function e(o,e,t){console.log("app module started!")}angular.module("myApp",["ui.router","ngMaterial","ngFileUpload"]).config(o).run(e),o.$inject=["$urlRouterProvider","$locationProvider"],e.$inject=["$http","$rootScope","$window"]}(),function(){"use strict";function o(o){console.log("pdfOcr component on!")}angular.module("myApp").component("pdfOcr",{templateUrl:"/src/app/pdfOcrComponent/pdfOcr.tmpl.html",controller:o}),o.$inject=["$scope"]}(),function(){"use strict";function o(o){console.log("In routes config"),o.state("app",{abstract:!0,templateUrl:"front-end.html"}).state("topPage",{url:"/",templateUrl:"route/homepage.html",controller:"homepageCtrl",controllerAs:"$ctrl"})}angular.module("myApp").config(o),o.$inject=["$stateProvider"]}(),function(){"use strict";function o(o){console.log("homepageCtrl ok")}angular.module("myApp").controller("homepageCtrl",o),o.$inject=["$scope"]}(),function(){"use strict";function o(o,e,t){var l=this;console.log("uploadFile component on!"),l.$onInit=function(){l.files=[]},l.submit=function(){console.log(l.file),l.file&&l.upload(l.file);var o=new Date;l.fileName=o.getTime(),console.log(l.fileName)},l.upload=function(o){console.log("in Upload"),console.log(l.fileName),e.rename(o,l.fileName),e.upload({url:"/api/pdf/upload",data:{file:o}}).then(function(o){0===o.data.error_code?(t.alert("Success "+o.config.data.file.name+"uploaded. Response: "),console.log(o),l.outUrl=o.data.msg,console.log(l.outUrl)):t.alert("an error occured")},function(o){console.log("Error status: "+o.status),t.alert("Error status: "+o.status)},function(o){console.log(o);var e=parseInt(100*o.loaded/o.total);console.log("progress: "+e+"% "+o.config.data.file.name),l.progress="progress: "+e+"% "})}}angular.module("myApp").component("uploadFile",{templateUrl:"/src/app/uploadFileComponent/uploadFile.tmpl.html",controller:o,binding:{uploadedFileSrc:"@"}}),o.$inject=["$scope","Upload","$window"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
